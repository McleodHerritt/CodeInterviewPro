[
  {
    "question": "What type of database is MongoDB and how does it store data?",
    "answer": "MongoDB is a NoSQL database that stores data in flexible, JSON-like documents.",
    "category": "MongoDB"
  },
  {
    "question": "What is a collection in MongoDB?",
    "answer": "A collection in MongoDB is analogous to a table in relational databases and is used to store a group of documents.",
    "category": "MongoDB"
  },
  {
    "question": "How do you find documents in a MongoDB collection using a specific field value?",
    "answer": "You use the find() method with a query object specifying the field value, like db.collection.find({fieldName: value}).",
    "category": "MongoDB"
  },
  {
    "question": "What is Express.js primarily used for in web development?",
    "answer": "Express.js is a web application framework for Node.js, used for building web applications and APIs.",
    "category": "Express"
  },
  {
    "question": "How do you create a basic server in Express?",
    "answer": "By using express() to create an Express application instance and then using the listen method on the instance to start the server.",
    "category": "Express"
  },
  {
    "question": "How do you handle GET requests in an Express app?",
    "answer": "By using the get() method of the Express app instance, specifying a path and a callback function.",
    "category": "Express"
  },
  {
    "question": "What is JSX in React?",
    "answer": "JSX is a syntax extension for JavaScript, used in React to describe what the UI should look like.",
    "category": "React"
  },
  {
    "question": "What are components in React?",
    "answer": "Components are independent, reusable pieces of the UI in a React application.",
    "category": "React"
  },
  {
    "question": "How do you manage state in a React component?",
    "answer": "State in a React component can be managed using the useState hook in functional components or this.state in class components.",
    "category": "React"
  },
  {
    "question": "What is Node.js?",
    "answer": "Node.js is a JavaScript runtime built on Chrome's V8 JavaScript engine, used for building scalable network applications.",
    "category": "Node"
  },
  {
    "question": "How do you import modules in Node.js?",
    "answer": "Modules in Node.js can be imported using the require() function.",
    "category": "Node"
  },
  {
    "question": "What is the Event Loop in Node.js?",
    "answer": "The Event Loop in Node.js is a mechanism that allows Node.js to perform non-blocking I/O operations, despite JavaScript being single-threaded.",
    "category": "Node"
  },
  {
    "question": "Explain the concept of closures in JavaScript.",
    "answer": "A closure is a feature in JavaScript where an inner function has access to variables from an outer functionâ€™s scope, even after the outer function has finished execution.",
    "category": "JavaScript Fundamentals"
  },
  {
    "question": "What is 'hoisting' in JavaScript?",
    "answer": "Hoisting is JavaScript's default behavior of moving declarations to the top of the current scope (script or function).",
    "category": "JavaScript Fundamentals"
  },
  {
    "question": "What is the difference between var, let, and const in JavaScript?",
    "answer": "Var has function scope, let and const have block scope. Var declarations are hoisted, let and const are not. Const is used to declare constants.",
    "category": "JavaScript Fundamentals"
  },
  {
    "question": "What is a RESTful API?",
    "answer": "A RESTful API is an application program interface that uses HTTP requests to GET, PUT, POST and DELETE data.",
    "category": "RESTful API"
  },
  {
    "question": "What are the main HTTP methods used in a RESTful API?",
    "answer": "The main HTTP methods are GET, POST, PUT, DELETE, and PATCH.",
    "category": "RESTful API"
  },
  {
    "question": "What is the purpose of the HTTP status code in RESTful API responses?",
    "answer": "HTTP status codes indicate whether a specific HTTP request has been successfully completed. Responses are grouped in five classes.",
    "category": "RESTful API"
  },

  {
    "question": "What is GraphQL?",
    "answer": "GraphQL is a query language for APIs and a runtime for executing those queries by using a type system you define for your data.",
    "category": "GraphQL"
  },
  {
    "question": "What are the main differences between GraphQL and REST?",
    "answer": "In GraphQL, you can request exactly the data you need, and multiple resources can be retrieved in a single request. REST typically requires multiple roundtrips to different endpoints to retrieve multiple resources.",
    "category": "GraphQL"
  },
  {
    "question": "What is the difference between a query and a mutation in GraphQL?",
    "answer": "In GraphQL, queries are used to fetch data (similar to GET in REST), while mutations change server-side data (similar to POST, PUT, DELETE in REST).",
    "category": "GraphQL"
  }
]
